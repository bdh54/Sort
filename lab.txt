1. Implement inOrder in TestSorter.java that returns false if the
   array is not sorted.  Use compareTo on every pair of adjacent
   items.


2. Implement sameElements(array1, array2) using HashMap that returns false if the
   two arrays have different elements.  For example,

	array1 = { 3, 1, 4, 1, 5, 9, 2, 6 }
	array2 = { 1, 1, 2, 2, 4, 5, 6, 9 }

   The second array is sorted, but it has one two 2's and no 3 because
   the sorting algorithm has a bug.  So sameElements(array1, array2)
   would return false.

   You will create a Map elementCounts from E to Integer.  For each
   element e in the first array, map e to 1 if it is the first time
   you see e or to 1 more than its current value.  So "1" will map to
   2 since it appears twice and "2" will map to 1.

   Then go through the second array counting in the number of elements
   and keeping track of the previous element.  When it gets to "2",
   previous will be "1", so compare count==2 to the value 2 in
   elementCounts for "1".  That will be correct.  Set count=0.

   When it gets to "3", compare count==2, to the value 1 in
   elementCounts for "2" That will be incorrect, so return false.


3. Finish implementing InsertionSort and test.

   Run TestTestSorter.java to get your score for the lab.


HOMEWORK

4. Ditto HeapSort.  (Uncomment line in main.)


5. Ditto QuickSort.


6. Ditto MergeSort.


7. Put the correct O() in each O() method.

   Modify test to print out the constant next to the running time.

   In tests, call test with powers of 10 from 10,000 to 10,000,000.

   Are the constants constant?  (Sort of?)


8. Write the merge method in ExternalSort.  Test on number.txt and
   then make your own file with different lengths to make sure you have
   it right.







